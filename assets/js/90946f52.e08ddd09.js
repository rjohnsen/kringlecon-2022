"use strict";(self.webpackChunkkringlecon_2022=self.webpackChunkkringlecon_2022||[]).push([[9136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=i,g=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:5},a="Open Boria Mine Door",l={unversionedId:"writeup/WebRing/open_boria_mine_door",id:"writeup/WebRing/open_boria_mine_door",title:"Open Boria Mine Door",description:"Open the door to the Boria Mines. Help Alabaster Snowball in the Web Ring to get some hints for this challenge.",source:"@site/docs/writeup/WebRing/open_boria_mine_door.md",sourceDirName:"writeup/WebRing",slug:"/writeup/WebRing/open_boria_mine_door",permalink:"/kringlecon-2022/writeup/WebRing/open_boria_mine_door",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"IMDS, XXE, and Other Abbreviations",permalink:"/kringlecon-2022/writeup/WebRing/imds_xxe_and_other_abbreviations"},next:{title:"Glamtariels Fountains",permalink:"/kringlecon-2022/writeup/WebRing/glamtariels_fountain"}},p={},s=[{value:"Pin 1",id:"pin-1",level:2},{value:"Pin 2",id:"pin-2",level:2},{value:"Pin 3",id:"pin-3",level:2},{value:"Pin 4",id:"pin-4",level:2},{value:"Pin 5",id:"pin-5",level:2},{value:"Pin 6",id:"pin-6",level:2},{value:"All pins unlocked",id:"all-pins-unlocked",level:2}],c={toc:s};function u(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"open-boria-mine-door"},"Open Boria Mine Door"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Open the door to the Boria Mines. Help Alabaster Snowball in the Web Ring to get some hints for this challenge.")),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"open-boria-mine-doors"},"Open Boria Mine Doors"),(0,i.kt)("h2",{id:"pin-1"},"Pin 1"),(0,i.kt)("p",null,"Inspecting the HTML source code I saw a commented-out line containing the keyword to unlock Pin 1. Simply copy and paste the value and I was good to go."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- @&@&&W&&W&&&& --\x3e\n")),(0,i.kt)("h2",{id:"pin-2"},"Pin 2"),(0,i.kt)("p",null,"The general theme is to inspect the HTML source to find hints to solve the various pins. For Pin 2 I saw a to-do note to filter out HTML from user input. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- TODO: FILTER OUT HTML FROM USER INPUT --\x3e\n")),(0,i.kt)("p",null,"The assignment seems to be to draw lines between various connecting dots. The best way to do that is to simply draw a line using the SVG HTML tag, like this: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<svg height="170" width="200">\n  <path d="M0 73 298 194" stroke-width="10" stroke="white"/>2\n</svg>\n')),(0,i.kt)("h2",{id:"pin-3"},"Pin 3"),(0,i.kt)("p",null,"Advancing on this, I found a hint regarding Javascript in the HTML source"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- TODO: FILTER OUT JAVASCRIPT FROM USER INPUT --\x3e\n")),(0,i.kt)("p",null,"Simply outputting the SVG tag using Javascript:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script>\ndocument.write(\'\n<svg height="170" width="200">\n  <path d="M0 95 280 1" stroke-width="10" stroke="blue"/>2\n</svg>\n\');\n<\/script>\n')),(0,i.kt)("h2",{id:"pin-4"},"Pin 4"),(0,i.kt)("p",null,"For this pin, there are no commented-out hints, but I found a sanitation script present which simply replaces the first occurrences of each special char;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n    const sanitizeInput = () => {\n        const input = document.querySelector('.inputTxt');\n        const content = input.value;\n        input.value = content\n            .replace(/\"/, '')\n            .replace(/'/, '')\n            .replace(/</, '')\n            .replace(/>/, '');\n    }\n<\/script>\n")),(0,i.kt)("p",null,"Padding the input with <",">"," simply unlocked the pin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<>\n<svg height="170" width="200">\n  <path d="M0 40 280 40" stroke-width="10" stroke="white"/>2\n  <path d="M0 130 280 130" stroke-width="10" stroke="blue"/>2\n</svg>\n')),(0,i.kt)("h2",{id:"pin-5"},"Pin 5"),(0,i.kt)("p",null,"The script from the last pin has been extended to now filtrate out every occurrence!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n        const sanitizeInput = () => {\n            const input = document.querySelector('.inputTxt');\n            const content = input.value;\n            input.value = content\n                .replace(/\"/gi, '')\n                .replace(/'/gi, '')\n                .replace(/</gi, '')\n                .replace(/>/gi, '');\n        }\n<\/script>\n")),(0,i.kt)("p",null,"However, this happens only on the client side. If I pass the POST request through BurpSuite proxy, I can insert my trusty SVG tag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'inputTxt=<script>document.write(\'<svg height="170" width="200"><path d="M35 170 210 90" stroke-width="10" stroke="blue"/><path d="M0 135 210 40" stroke-width="10" stroke="red"/></svg>\');<\/script>\n')),(0,i.kt)("h2",{id:"pin-6"},"Pin 6"),(0,i.kt)("p",null,"No hint available here - but I am still in BurpSuite land manipulating the POST request directly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'inputTxt=<svg height="170" width="200"><path d="M0 35 210 35" stroke-width="10" stroke="lime"/><path d="M0 75 240 115" stroke-width="10" stroke="red"/><path d="M0 115 150 170" stroke-width="10" stroke="blue"/></svg>\n')),(0,i.kt)("h2",{id:"all-pins-unlocked"},"All pins unlocked"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"All pins solved",src:n(4832).Z,width:"886",height:"643"})))}u.isMDXComponent=!0},4832:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/pins-b22a889610323310231e2414305abbca.png"}}]);